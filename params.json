{"name":"Alfred-workflow","tagline":"Ruby Gem helper for building Alfred workflow.","body":"# alfred-workflow [![Build Status](https://travis-ci.org/zhaocai/alfred-workflow.png?branch=master)](https://travis-ci.org/zhaocai/alfred-workflow)\r\n\r\n* home  :: http://zhaocai.github.com/alfred2-ruby-template/\r\n* rdoc  :: http://rubydoc.info/gems/alfred-workflow/\r\n* code  :: https://github.com/zhaocai/alfred-workflow\r\n* bugs  :: https://github.com/zhaocai/alfred-workflow/issues\r\n\r\n\r\n## DESCRIPTION:\r\n\r\nalfred-workflow is a ruby Gem helper for building [Alfred](http://www.alfredapp.com) workflow.\r\n\r\n\r\n## FEATURES:\r\n\r\n* Use standard [bundler][gembundler] to easily package, manage, and update ruby gems in the workflow.\r\n* Friendly exception and debug output to the Mac OS X Console.\r\n* Automate saving and loading cached feedback\r\n* Automate rescue feedback items to alfred when something goes wrong.\r\n* Functions to easily load and save user configuration (in YAML)\r\n* Functions for smart case query filter of feedback results.\r\n* Functions for finding the bundle ID, cache and storage paths, and query arguments.\r\n* Functions for reading and writing plist files.\r\n* Functions to simplify generating feedback XML for Alfred.\r\n\r\n## INSTALL:\r\n\r\n`gem install alfred-workflow`\r\n\r\n## USAGE:\r\n\r\n* Refer to [alfred2-ruby-template]( https://github.com/zhaocai/alfred2-ruby-template ) for examples and detailed instruction. Also refer to some of the example projects:\r\n\r\n* [alfred2-top-workflow]( https://github.com/zhaocai/alfred2-top-workflow )\r\n* [alfred2-google-workflow]( https://github.com/zhaocai/alfred2-google-workflow )\r\n* [alfred2-keylue-workflow]( https://github.com/zhaocai/alfred2-keylue-workflow )\r\n* [alfred2-sourcetree-workflow]( https://github.com/zhaocai/alfred2-sourcetree-workflow )\r\n\r\n## SYNOPSIS:\r\n\r\n### The Basic\r\n```ruby\r\nrequire 'rubygems' unless defined? Gem\r\nrequire \"bundle/bundler/setup\"\r\nrequire \"alfred\"\r\n\r\nAlfred.with_friendly_error do |alfred|\r\n  fb = alfred.feedback\r\n\r\n  fb.add_file_item(File.expand_path \"~/Applications/\")\r\n\r\n  puts fb.to_alfred(ARGV)\r\nend\r\n```\r\n\r\nCode are wrapped in `Alfred.with_friendly_error` block. Exceptions and debug messages are logged to Console log file **~/Library/Logs/Alfred-Workflow.log**.\r\n\r\n### With rescue feedback automatically generated!\r\n\r\n```ruby\r\nrequire 'rubygems' unless defined? Gem\r\nrequire \"bundle/bundler/setup\"\r\nrequire \"alfred\"\r\n\r\ndef my_code_with_something_goes_wrong\r\n  true\r\nend\r\n\r\nAlfred.with_friendly_error do |alfred|\r\n  alfred.with_rescue_feedback = true\r\n\r\n  fb = alfred.feedback\r\n\r\n  if my_code_with_something_goes_wrong\r\n    raise Alfred::NoBundleIDError, \"Wrong Bundle ID Test!\"\r\n  end\r\nend\r\n```\r\n\r\n![](https://raw.github.com/zhaocai/alfred2-ruby-template/master/screenshots/rescue%20feedback.png)\r\n\r\n\r\n### Automate saving and loading cached feedback\r\n```ruby\r\nrequire 'rubygems' unless defined? Gem\r\nrequire \"bundle/bundler/setup\"\r\nrequire \"alfred\"\r\n\r\nAlfred.with_friendly_error do |alfred|\r\n  alfred.with_rescue_feedback = true\r\n  alfred.with_cached_feedback do\r\n    # expire in 1 hour\r\n    use_cache_file :expire => 3600\r\n    # use_cache_file :file => \"/path/to/your/cache_file\", :expire => 3600\r\n  end\r\n\r\n  if fb = alfred.feedback.get_cached_feedback\r\n    # cached feedback is valid\r\n    puts fb.to_alfred\r\n  else \r\n    fb = alfred.feedback\r\n    # ... generate_feedback as usually\r\n    fb.put_cached_feedback\r\n  end\r\nend\r\n```\r\n\r\n### Customize feedback item matcher\r\n\r\n```ruby\r\nfb = alfred.feedback\r\nfb.add_item(:uid          => \"uid\"          ,\r\n            :arg          => \"arg\"          ,\r\n            :autocomplete => \"autocomplete\" ,\r\n            :title        => \"Title\"        ,\r\n            :subtitle     => \"Subtitle\"     ,\r\n            :match?       => :all_title_match?)\r\n\r\nfb.add_file_item(File.expand_path \"~/Applications/\", :match? => :all_title_match?)\r\n```\r\n\r\n`:title_match?` and `:all_title_match?` are built in.\r\n\r\nTo define your new matcher\r\n```ruby\r\nModule Alfred\r\n  class Feedback\r\n    class Item\r\n      # define new matcher function here\r\n      def your_match?(query)\r\n        return true\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nCheck the code in [alfred/feedback/item.rb]( https://github.com/zhaocai/alfred-workflow/blob/master/lib/alfred/feedback/item.rb#L63 ) for more information.\r\n\r\n\r\n\r\n## Troubleshooting\r\n\r\n\r\n\r\n\r\n## DEVELOPERS:\r\n\r\nAfter checking out the source, run:\r\n\r\n  $ rake newb\r\n\r\nThis task will install any missing dependencies, run the tests/specs,\r\nand generate the RDoc.\r\n\r\n## LICENSE:\r\n\r\nCopyright (c) 2013 Zhao Cai <caizhaoff@gmail.com>\r\n\r\nThis program is free software: you can redistribute it and/or modify it under\r\nthe terms of the GNU General Public License as published by the Free Software\r\nFoundation, either version 3 of the License, or (at your option)\r\nany later version.\r\n\r\nThis program is distributed in the hope that it will be useful, but WITHOUT\r\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\nFOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with\r\nthis program. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n[gembundler]: http://gembundler.com/\r\n[alfredapp]: http://www.alfredapp.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}